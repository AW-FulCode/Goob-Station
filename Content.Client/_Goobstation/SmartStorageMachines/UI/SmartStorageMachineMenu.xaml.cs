using System.Numerics;
using Content.Shared._Goobstation.SmartStorageMachines;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Robust.Client.UserInterface;
using Content.Client.UserInterface.Controls;
using Content.Shared.IdentityManagement;
using Robust.Client.Graphics;

namespace Content.Client._Goobstation.SmartStorageMachines.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class SmartStorageMachineMenu : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private readonly Dictionary<EntProtoId, EntityUid> _dummies = [];

        public event Action<GUIBoundKeyEventArgs, ListData>? OnItemSelected;

        private readonly StyleBoxFlat _styleBox = new() { BackgroundColor = new Color(70, 73, 102) };

        public SmartStorageMachineMenu()
        {
            MinSize = SetSize = new Vector2(250, 150);
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            SmartStorageContents.SearchBar = SearchBar;
            SmartStorageContents.DataFilterCondition += DataFilterCondition;
            SmartStorageContents.GenerateItem += GenerateButton;
            SmartStorageContents.ItemKeyBindDown += (args, data) => OnItemSelected?.Invoke(args, data);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            // Don't clean up dummies during disposal or we'll just have to spawn them again
            if (!disposing)
                return;

            // Delete any dummy items we spawned
            foreach (var entity in _dummies.Values)
            {
                _entityManager.QueueDeleteEntity(entity);
            }
            _dummies.Clear();
        }

        private bool DataFilterCondition(string filter, ListData data)
        {
            if (data is not SmartStoreItemsListData { ItemText: var text })
                return false;

            if (string.IsNullOrEmpty(filter))
                return true;

            return text.Contains(filter, StringComparison.CurrentCultureIgnoreCase);
        }

        private void GenerateButton(ListData data, ListContainerButton button)
        {
            if (data is not SmartStoreItemsListData { ItemProtoID: var protoID, ItemText: var text })
                return;

            button.AddChild(new SmartStorageMachineItem(protoID, text));

            button.ToolTip = text;
            button.StyleBoxOverride = _styleBox;
        }

        /// <summary>
        /// Populates the list of available items on the smartstorage machine interface
        /// and sets icons based on their prototypes
        /// </summary>
        public void Populate(Dictionary<NetEntity, SmartStorageMachineInventoryEntry> inventory)
        {
            var longestEntry = string.Empty;
            var listData = new List<SmartStoreItemsListData>();
            var index = 0;
            foreach (KeyValuePair<NetEntity, SmartStorageMachineInventoryEntry> entry in inventory)
            {
                
                if (!_prototypeManager.TryIndex(entry.Value.ID, out var prototype))
                    continue;

                if (!_dummies.TryGetValue(entry.Value.ID, out var dummy))
                {
                    dummy = _entityManager.Spawn(entry.Value.ID);
                    _dummies.Add(entry.Value.ID, dummy);
                }

                var itemName = entry.Value.Name;

                if (itemName.Length > longestEntry.Length)
                    longestEntry = itemName;

                listData.Add(new SmartStoreItemsListData(prototype.ID, itemName, index));
                index++;
            }

            SmartStorageContents.PopulateList(listData);

            SetSizeAfterUpdate(longestEntry.Length, inventory.Count);
        }

        private void SetSizeAfterUpdate(int longestEntryLength, int contentCount)
        {
            SetSize = new Vector2(Math.Clamp((longestEntryLength + 2) * 12, 250, 400),
                Math.Clamp(contentCount * 50, 150, 350));
        }
    }
}

public record SmartStoreItemsListData(EntProtoId ItemProtoID, string ItemText, int ItemIndex) : ListData;
